#!/usr/bin/ruby

# Example:
# """
# Query sequence: AT1G47490.1
# RRM_1: domain 1 of 3, from 103 to 176: score 42.7, E = 1.3e-09
# """

DATA = {}

state, state2, protein_name, start, stop, domain_name = [nil] * 6
while line = STDIN.gets
  if line =~ /Query sequence: (.*)/
    protein_name = $1
    raise "Expected domain name, found #{line}" if state == :LOOKING_FOR_DOMAIN_NAME 
    state  = :LOOKING_FOR_DOMAIN_NAME
  end
 
  if line =~ /(.*?): domain .*?, from ([0-9]*?) to ([0-9]*?):/
    domain_name, start, stop = $1, $2.to_i, $3.to_i
    raise "Expected domain name, found #{line}" if state == :LOOKING_FOR_PROTEIN_NAME 
    state  = :LOOKING_FOR_PROTEIN_NAME
    state2 = :PRINTING
  end

  if state == :LOOKING_FOR_PROTEIN_NAME and state2 == :PRINTING
    DATA[protein_name] ||= []
    DATA[protein_name].push [domain_name, start..stop]
    state2 = nil
  end 
end

# Remove overlaps
overlapped_domains = 0
DATA.each_pair do |key, val|
  overlaps = []

  # Compare domains all-against-all
  sorted_by_start = val.sort{|l,r| l[1].first <=> r[1].first}
  sorted_by_start[1..-1].each_with_index do |dom, i|
    prev = sorted_by_start[i]
    overlaps.push dom if prev[1].include? dom[1].first
  end

  # puts key
  # val.each do |i|
  #   p i
  # end
  # puts "OVERLAPS: #{overlaps.inspect}" unless overlaps.empty?
  # puts

  overlaps.each {|o| overlapped_domains += 1; val.delete o}
end



domains = 0
CLUSTERED_DATA = {}

DATA.each_pair do |key, val|
  domains += val.size

  new_key = val.collect{|v| v[0]}
  CLUSTERED_DATA[new_key] ||= []
  CLUSTERED_DATA[new_key].push key
end

RESULTS = []
CLUSTERED_DATA.each_pair do |key, val|
  RESULTS.push val
end

RESULTS.sort{|l,r| r.size <=> l.size}.each{|i| puts i.join(' ')}

STDERR.puts "Total domains (without overlap removal): #{domains + overlapped_domains}"
STDERR.puts "Total domains: #{domains}"

